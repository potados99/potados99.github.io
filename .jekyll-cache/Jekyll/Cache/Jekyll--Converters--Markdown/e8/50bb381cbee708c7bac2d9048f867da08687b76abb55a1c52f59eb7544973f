I"#C<blockquote>
  <p>이미지 출처: <a href="https://www.rd.com/culture/math-lessons-real-life/">여기</a></p>
</blockquote>

<p>작년만큼은 아니어도 올해도 아주 덥다. 낮 기온이 30도 아래로 내려가는 것을 보기가 어렵다.</p>

<p>그래서 에어컨을 자주 가동시켜야 집에서 버틸만하다.</p>

<p>하지만 에어컨은 전기를 많이 먹고, 주택 전기는 비싸다…</p>

<h2 id="전기요금-누진제">전기요금 누진제</h2>

<p>전기를 많이 쓸수록 단위당 요금이 올라가는 구조다.</p>

<p>예전에는 누진 단계가 7단계나 되던 시절도 있었고, 그때에는 요금 차이가 18.7배나 벌어졌다고 한다.</p>

<p>지금은 3단계로 조절되었으며, 1단계와 3단계는 3배 차이가 난다.</p>

<p>하지만 여름과 겨울(7~8월과 12월~2월)에는 한단계 더 추가된 4단계 누진 요금이 적용된다.</p>

<p><img src="/assets/images/elec-charge.png" alt="전기요금 그래프" /></p>

<blockquote>
  <p>쓰면 쓸수록 팍팍 올라가는 구조다. 마지막 단계에서는 처음과 7배 차이가 난다.</p>
</blockquote>

<p><img src="/assets/images/elec-charge-integral.png" alt="전기요금 그래프 적분" /></p>
<blockquote>
  <p>적분해보면 실제 요금을 알 수 있다. 400kWh 쓰면 56,052월, 800kWh 쓰면 168,131원.</p>
</blockquote>

<h2 id="전기-잘-쓰기">전기 잘 쓰기</h2>

<p>아까 어머님과 형이 이런 대화를 나누는 것을 들었다.</p>

<blockquote>
  <p>- “하루에 7kWh 정도 쓰는 것 같아”  <br />
- “1kWh에 100원이래요. 하루에 700원이면 한달 내내 틀어도 얼마 안 나올 것 같은데요?”  <br />
- “무슨 소리야 지난번에 살던 집에서 여름에 14만원 나온 적 있어!”  <br />
- “뭐지…”</p>
</blockquote>

<p>누진제도 자체가 뭐지 싶다. 왜 있는건지 모르겠다.</p>

<p>에어컨에는 전력 사용량을 보여주는 기능이 있다. 월 평균 전기 사용량에 이를 합하면 예상 요금을 구할 수 있다.</p>

<p>여기에 도움이 될 만한 작은 C 프로그램을 만들어 보았다.</p>

<h2 id="piecewise-function-적분하기">Piecewise Function 적분하기</h2>

<p>누진제가 없다면 1kWh당 전기 요금은 사용량과 무관하게 고정된 값을 가지는 상수함수로 볼 수 있다.</p>

<p>누진제가 적용된 전기 요금은 사용량 x에 대한 요금 f(x)로 볼 수 있다.</p>

<p>각 단계 안에서는 요금이 같으므로 f(x)는 여러 개의 상수 함수(단계별 요금)가 모여 이루는 연속함수라고 할 수 있다.</p>

<p>이런 함수를 <a href="https://en.wikipedia.org/wiki/Step_function">step function</a> 또는 <a href="https://en.wikipedia.org/wiki/Piecewise">piecewise function</a>이라고 부른다.</p>

<p>대표적인 예시로 f(x) = abs(x)가 있다.</p>

<p><img src="/assets/images/abs-x.svg" alt="절댓값 x" /></p>
<blockquote>
  <p>너무 뾰족해서 미분이 안된다.</p>
</blockquote>

<p>누진요금도 이와 같이 나타낼 수 있다.</p>

<p><img src="/assets/images/charge-function.gif" alt="charge" /></p>

<p>사용량에 따른 단위 전기요금을 charge(x)라고 할 때, charge(x)의 정적분을 구해보자.</p>

<h2 id="c">C</h2>

<p>먼저 step function을 담을 수 있는 구조체를 정의한다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// types.h</span>

<span class="k">typedef</span> <span class="kt">int</span> 	<span class="n">range_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">double</span> 	<span class="n">value_t</span><span class="p">;</span>

<span class="p">...</span>

<span class="k">struct</span> <span class="n">numeric_range</span> <span class="p">{</span>
	<span class="n">range_t</span> 				<span class="n">begin</span><span class="p">;</span>
	<span class="n">range_t</span> 				<span class="n">end</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">step_piece</span> <span class="p">{</span>
	<span class="k">struct</span> <span class="n">numeric_range</span>	<span class="n">range</span><span class="p">;</span>
	<span class="n">value_t</span>					<span class="n">value</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">step_function</span> <span class="p">{</span>
	<span class="kt">size_t</span>			        <span class="n">n_steps</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">step_piece</span>		<span class="n">steps</span><span class="p">[</span><span class="n">STEPS_MAX</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<p>그리고 step function의 적분을 계산할 함수를 만든다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// step_function.c</span>

<span class="c1">// 범위 추출 도와주는 함수</span>
<span class="k">static</span> <span class="kr">inline</span> <span class="kt">int</span> <span class="nf">select_range</span><span class="p">(</span><span class="k">struct</span> <span class="n">numeric_range</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">result</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">numeric_range</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">range</span><span class="p">,</span> <span class="n">range_t</span> <span class="n">begin</span><span class="p">,</span> <span class="n">range_t</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">result</span> <span class="o">&amp;&amp;</span> <span class="n">range</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">result</span><span class="o">-&gt;</span><span class="n">begin</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">range</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">,</span> <span class="n">begin</span><span class="p">);</span>
	<span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="n">range</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">result</span><span class="o">-&gt;</span><span class="n">begin</span> <span class="o">=</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">-</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 얘가 우리가 필요한 계산 함수</span>
<span class="n">value_t</span> <span class="nf">integrate_step_function</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">step_function</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">function</span><span class="p">,</span> <span class="n">range_t</span> <span class="n">begin_inclusive</span><span class="p">,</span> <span class="n">range_t</span> <span class="n">end_inclusive</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">function</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">value_t</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kt">size_t</span> <span class="n">n_steps</span> <span class="o">=</span> <span class="n">function</span><span class="o">-&gt;</span><span class="n">n_steps</span><span class="p">;</span>
	<span class="k">const</span> <span class="k">struct</span> <span class="n">step_piece</span> <span class="o">*</span><span class="n">steps</span> <span class="o">=</span> <span class="n">function</span><span class="o">-&gt;</span><span class="n">steps</span><span class="p">;</span>

	<span class="k">struct</span> <span class="n">numeric_range</span> <span class="n">selection</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n_steps</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">select_range</span><span class="p">(</span><span class="o">&amp;</span><span class="n">selection</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">steps</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">range</span><span class="p">,</span> <span class="n">begin_inclusive</span><span class="p">,</span> <span class="n">end_inclusive</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">total</span> <span class="o">+=</span> <span class="p">(</span><span class="n">selection</span><span class="p">.</span><span class="n">end</span> <span class="o">-</span> <span class="n">selection</span><span class="p">.</span><span class="n">begin</span><span class="p">)</span> <span class="o">*</span> <span class="n">steps</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">total</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 콘솔 인터페이스를 만들어준다.</p>

<p>실행파일 이름은 calculate로 할 것이고, 인자로 전기 사용량을 kWh 단위 정수로 입력받는다.</p>

<p>-h 옵션을 주면 숫자에 정갈하게 쉼표가 찍혀 나와 알아보기 편해진다.</p>

<p>-s 옵션을 주면 동계/하계 추가 누진 요금을 적용한다.</p>

<p>알아보기 편하라고 메인 함수에 일단 다 집어넣었는데, 대략 간추리면 아래와 같다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.c</span>

<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">goto</span> <span class="n">error_arg_no</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="k">while</span> <span class="p">(</span><span class="n">optind</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="k">const</span> <span class="o">*</span><span class="p">)</span><span class="n">argv</span><span class="p">,</span> <span class="n">opstring</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="sc">'h'</span><span class="p">:</span>
                <span class="n">fmt</span> <span class="o">=</span> <span class="n">VFMT_BGN</span> <span class="n">VFMT_COMMA</span> <span class="n">VFMT_INTONLY</span> <span class="n">VFMT_END</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
                <span class="n">func</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">step_function</span><span class="p">)</span><span class="n">ELECTRIC_CHARGES_FUNCTION_SUMMER_WINTER</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="sc">'?'</span><span class="p">:</span>
                <span class="k">goto</span> <span class="n">error_option</span><span class="p">;</span>

            <span class="nl">default:</span>
                <span class="n">err</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">"Impossible case: unhandled option: %c"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>		
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="n">value_t</span> <span class="n">result</span> <span class="o">=</span> <span class="n">integrate_step_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">func</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">power_usage</span><span class="p">);</span>

<span class="p">...</span>

<span class="n">printf</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>

<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>그리고 제일 중요한 함수 정의는 여기에 있다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// electric_charges.h</span>

<span class="cp">#define ELECTRIC_CHARGES_FUNCTION												\
	{																			\
			.n_steps = 3,														\
			.steps = {															\
				{ .range = { 0, 200 }, .value = 93.3 },							\
				{ .range = { 201, 400 }, .value = 187.9 },						\
				{ .range = { 401, RANGE_MAX }, .value = 280.9 }					\
			}																	\
	}
</span>
<span class="cp">#define ELECTRIC_CHARGES_FUNCTION_SUMMER_WINTER									\
	{																			\
			.n_steps = 4,														\
			.steps = {															\
				{ .range = { 0, 200 }, .value = 93.3 },							\
				{ .range = { 201, 400 }, .value = 187.9 },						\
				{ .range = { 401, 1000 }, .value = 280.9 },						\
				{ .range = { 1001, RANGE_MAX }, .value = 709.5 }				\
			}																	\
	}
</span></code></pre></div></div>

<p>생략을 많이 했다. 원본은 <a href="https://github.com/potados99/c-apps/tree/master/electric-charges-calc">여기</a>에 있다.</p>

<p>실행해보면 아래와 같다.</p>

<p><img src="/assets/images/elec-calc-demo.png" alt="demo" /></p>

<blockquote>
  <p>450kWh 쓰면 69,816원. 실제 요금과는 다를 수 있다.</p>
</blockquote>

<h2 id="결론">결론</h2>

<p>너무 덥다. 에어컨 있어서 간신히 살 것 같다.</p>

<p>이제 실시간으로 요금 올라가는거 보면서 아껴틀어야겠다. 흑..</p>

<h2 id="참고한-글들">참고한 글들</h2>

<ul>
  <li><a href="https://kr.mathworks.com/help/matlab/ref/fplot.html">fplot</a></li>
  <li><a href="http://www.matrixlab-examples.com/piecewise-function.html">Piecewise function - separate ranges in Matlab</a></li>
</ul>
:ET