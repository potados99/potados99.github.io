I"J1<p><a href="https://www.acmicpc.net/problem/6236">문제(백준)</a></p>

<p><a href="https://github.com/potados99/ps-study/blob/master/6236.cpp">풀이(GitHub)</a></p>

<h2 id="배경">배경</h2>

<p>처음 풀 때에는 이분 탐색 문제인 줄 모르고 덤볐다가 시간 초과로 여러 번 틀렸다.</p>

<blockquote>
  <p>내가 알던 Binary Search는 ‘이진 탐색’인 것 같았는데 PS 쪽에서는 이분 탐색이라고 하는가보다.</p>
</blockquote>

<h2 id="문제-파악">문제 파악</h2>

<h3 id="개요">개요</h3>

<p>현우라는 친구는 하루에 돈을 <code class="highlighter-rouge">1 &lt;= 금액 &lt;= 10,000</code>원 만큼 통장에서 빼서 쓴다고 한다.</p>

<p>통장에서 돈을 인출할 때에는 매번 같은 금액 <code class="highlighter-rouge">K</code>만큼만 인출한다.</p>

<p>인출할 때에는 가지고 있던 금액에 더해지는게 아니라, 딱 인출한 돈만 남는다.</p>

<blockquote>
  <p>예를 들어 오늘 300원을 써야 하는데 손에 200원 밖에 없으면, 200원을 통장에 넣고 500원을 출금하여 500원을 만든다.</p>
</blockquote>

<p>현우가 <code class="highlighter-rouge">1 &lt;= N &lt;= 100,000</code>일 동안 사용할 돈이 미리 주어졌을 때, 정확히 <code class="highlighter-rouge">M</code>번 출금을 하여 먹고 살 수 있도록 하는 가장 작은 <code class="highlighter-rouge">K</code>를 구해야 한다.</p>

<h3 id="출금-횟수와-k의-관계">출금 횟수와 K의 관계</h3>

<p>만약 인출액 <code class="highlighter-rouge">K</code>가 매우 크다면 단 한번의 출금만으로도 <code class="highlighter-rouge">N</code>일 동안 돈을 사용할 수 있을 것이다.</p>

<p>만약 인출액 <code class="highlighter-rouge">K</code>가 작다면 출금을 더 자주 해야 할 것이다.</p>

<p>따라서 <strong><code class="highlighter-rouge">K</code>와 출금 횟수는 대체로 반비례</strong> 하는 것을 알 수 있다.</p>

<h3 id="k의-범위">K의 범위</h3>

<p>가장 큰 <code class="highlighter-rouge">K</code>는 매일 최대 금액 10,000원씩 100,000일 동안 사용한다고 가정했을 때 필요한 금액인 1,000,000,000(십억)원이다.</p>

<p><code class="highlighter-rouge">K</code>가 아주 작아서 어떤 날에 써야 하는 금액보다 작다면, 그 날에는 돈을 쓸 수 없을 것이다.</p>

<p>그러므로 <code class="highlighter-rouge">K</code>는 그 어떤 날에 필요한 돈의 양보다 크거나 같아야 한다.</p>

<p>따라서 <code class="highlighter-rouge">K</code>는 <strong><code class="highlighter-rouge">max(날마다 필요한 금액의 collection) &lt;= K &lt;= 1,000,000,000</code></strong> 이다.</p>

<h2 id="설계">설계</h2>

<h3 id="변수-잡기">변수 잡기</h3>

<p>변수는 당연히 정답에서 요구하는 <code class="highlighter-rouge">K</code>이다.</p>

<p><code class="highlighter-rouge">K</code>는 <code class="highlighter-rouge">필요 금액의 최댓값</code>부터 <code class="highlighter-rouge">10억</code> 사이에 존재하므로 순차적으로 접근할 수는 없다.</p>

<p>다행히 어떤 <code class="highlighter-rouge">K</code>에 대해 출금 횟수를 (빠르게) 세어 <code class="highlighter-rouge">M</code>과 비교할 수 있기 때문에 <strong>이분 탐색</strong> 을 사용하여 <code class="highlighter-rouge">O(log n)</code>으로 풀 수 있다.</p>

<h3 id="이분-탐색으로-접근하기">이분 탐색으로 접근하기</h3>

<p>이 문제를 이분 탐색으로 풀 수 있는 이유는, 임의의 <code class="highlighter-rouge">K</code>에 대해 <strong>그 값이 찾고자 하는 정답보다 작은지 아니면 큰 지 알 수 있기 때문이다.</strong></p>

<p>만약 그렇지 않았다면 모든 경우를 대입해가며 출금 횟수가 <code class="highlighter-rouge">M</code>이 되는 경우만 수집한 뒤, 그중에서 <code class="highlighter-rouge">K</code>의 최솟값을 찾아야 했을 것이다. 하지만 위에서 언급했듯이 <code class="highlighter-rouge">K</code>와 출금 횟수 사이에는 뚜렷한 관계가 있기 때문에 이를 가이드삼아 탐색 범위를 점점 좁혀나갈 수 있다!</p>

<p>너무 어렵게 써놓은 것 같다. 비유하자면 다음과 같다.</p>

<p>이런 상황이 있다:</p>
<blockquote>
  <p>아주 긴 도로를 따라 1층짜리 단독주택이 수도 없이 길게 늘어서 있고, 그중 한 집에 살고 있는 A라는 사람을 찾아야 한다. 집에 사는 사람이 누구인지 알아내는 유일한 방법은 집 앞에 가서 문을 두드려 물어보는 것이다.</p>
</blockquote>

<p>이런 상황에서 순차 탐색을 이용한다면:</p>
<blockquote>
  <ul>
    <li>첫번째 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘아뇨’</li>
    <li>두 번째 집 문을 두드려 묻는다: -‘A’씨 계시나요? - ‘아뇨’</li>
    <li>세 번째…  <br />
…</li>
  </ul>
</blockquote>

<p>만약 집주인들이 착해서 몇 가지 조언을 던져준다면:</p>
<blockquote>
  <ul>
    <li>첫번째 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘아뇨. 왼쪽으로 가봐요.’</li>
    <li>(한참 왼쪽으로 가서) 어느 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘아뇨. 왼쪽으로 가봐요.’</li>
    <li>(또 왼쪽으로 가서) 어느 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘아뇨. 오른쪽으로 가봐요.’</li>
    <li>(적당히 오른쪽으로 가서) 어느 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘아뇨. 왼쪽으로 가봐요.’</li>
    <li>(조금 왼쪽으로 가서) 어느 집 문을 두드려 묻는다: - ‘A’씨 계시나요? - ‘네.’</li>
  </ul>
</blockquote>

<p>훨씬 찾기 쉬울 것이다.</p>

<p>이 문제에서는 <code class="highlighter-rouge">출금 횟수</code>가 우리를 도와준다.</p>

<h2 id="구현">구현</h2>

<h3 id="이진-탐색">이진 탐색</h3>

<p>일단 이진 탐색의 기본 형태는 아래와 같다:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">BLAHBLAH</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">FOOBAR</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">mid</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">shoud_I_go_right</span><span class="p">(</span><span class="n">mid</span><span class="p">))</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">shoud_I_go_right</code> 부분만 만들면 된다.</p>

<h3 id="출금-횟수-구하기">출금 횟수 구하기</h3>

<p>일단 한 번 출금해서 <code class="highlighter-rouge">K</code>를 확보한 뒤, 필요한 만큼 쓴다. 한 번 써서 모자라질 것 같으면 잔고를 채운 뒤에 쓴다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">how_many_withdrawals_are_needed</span><span class="p">(</span><span class="kt">int</span> <span class="n">withdrawal_unit</span><span class="cm">/* 인출금액 */</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 처음 한번은 무조건 출금하고 시작.</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 한번 출금해서 현재까지 쓴 돈.</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">+</span> <span class="n">req</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">withdrawal_unit</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 돈이 부족해지면 출금하고 사용한다.</span>
            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
            <span class="n">sum</span> <span class="o">=</span> <span class="n">req</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 돈이 남으면 그냥 사용한다.</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">req</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="종합">종합</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// N과 M은 각각 n, m에 담김.</span>
<span class="c1">// 매일 사용할 돈은 req 배열에 담김.</span>

<span class="p">...</span>

<span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">req_max</span><span class="p">;</span> <span class="c1">// req 배열의 최댓값.</span>
<span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span> <span class="c1">// 10억.</span>
<span class="kt">int</span> <span class="n">mid</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">how_many_withdrawals_are_needed</span><span class="p">(</span><span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">m</span><span class="p">)</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 출금이 많이 필요하다는 것을 보니 인출액이 작은 것임. 늘려줌.</span>
    <span class="k">else</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span> <span class="c1">// 출금이 많이 필요하지 않다는 것을 보니 인출액이 큰 것임. 줄여줌.</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">left</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="p">...</span>

</code></pre></div></div>

<h2 id="마치며">마치며</h2>

<p><a href="https://github.com/ryuspace">스승님</a> 감사합니다 :)</p>
:ET