I"v2<p>파이썬 코드는 읽기 쉽다. 대체로 코드가 간결하며, 엄격한 들여쓰기로 코드 블럭을 구분하기 쉽다.<br />
이는 파이썬이 가독성을 염두에 두고 설계되었기 때문이다.</p>

<p>또한 파이썬이 읽기 쉬운 또 다른 이유는 “파이썬스러운” 이디엄(idiom)이다.<br />
파이썬 가이드라인이 제안하는 가장 좋은 방법(가독성이 가장 좋은)을 따를 때 이를 “파이썬스럽다”고 표현한다.</p>

<h2 id="일반적-개념">일반적 개념</h2>

<h3 id="간단하고-명쾌하게">간단하고 명쾌하게</h3>
<p>파이썬을 이용해서 복잡하고 긴 코드를 짤 수 있다. 하지만 같은 일을 하는 코드라면 짧고 간결하게 짜는 것이 낫다.</p>

<p><strong>나쁜 예</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">make_complex</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">args</span>
    <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span></code></pre></figure>

<p><strong>좋은 예</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">make_complex</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">'x'</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="s">'y'</span><span class="p">:</span> <span class="n">y</span><span class="p">}</span></code></pre></figure>

<h6 id="the-hichhikers-guide-to-python에서-인용">&lt;The Hichhiker’s Guide to Python&gt;에서 인용</h6>

<p>좋은 예시 코드에서는 단 두 줄만 읽고 함수가 어떤 일을 할 수 있는 지 알 수 있지만 나쁜 예시 코드에서는 그렇지 않다.</p>

<h3 id="한-줄에는-한-구문만">한 줄에는 한 구문만</h3>

<p>한 줄의 코드로 여러 명령을 수행할 수 있지만 이는 가독성을 해친다.</p>

<p><strong>나쁜 예</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">print</span> <span class="n">a</span><span class="p">;</span> <span class="k">print</span> <span class="n">b</span><span class="p">;</span></code></pre></figure>

<p><strong>좋은 예</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
	<span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">print</span> <span class="n">a</span>
<span class="k">print</span> <span class="n">b</span></code></pre></figure>

<h2 id="이디엄">이디엄</h2>

<p>이디엄(idiom)이란 코드를 작성하는 방법이다.<br />
자연스럽고 간결한 파이썬 코드를 <em>파이썬스럽</em>다고 한다.</p>

<p>대부분의 경우에는 이를 위한 유일하고 명백한 방법이 있다.</p>

<p>다음은 몇 가지 일반적인 파이썬 이디엄들이다.</p>

<h3 id="언패킹">언패킹</h3>

<p>리스트나 튜플을 쪼개어 각각의 원소에 이름을 붙여줄 수 있다.</p>

<p>예를 들어, 내장함수 <code class="highlighter-rouge">enumerate()</code>는 리스트의 각각의 원소를 (index, element)로 쪼개서 튜플을 만들어 반환한다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
	<span class="c1"># do something</span></code></pre></figure>

<p>리스트의 원소들을 각각의 변수에 할당할 수 있다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="mi">2</span></code></pre></figure>

<p>물론 튜플도 된다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="mi">2</span></code></pre></figure>

<p>변수를 서로 맞바꿀 수도 있다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span></code></pre></figure>

<p>중첩 언패킹도 된다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span></code></pre></figure>

<h3 id="사용하지-않을-변수-만들기">사용하지 않을 변수 만들기</h3>

<p>언패킹을 할 때, 튜플이나 리스트의 원소들에 대응되는 변수가 필요하다.<br />
그런데 굳이 그 변수를 사용하지 않을 것이라면 <code class="highlighter-rouge">__</code>(언더스코어 두개)를 사용하면 된다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">first</span><span class="p">,</span> <span class="n">__</span><span class="p">,</span> <span class="n">third</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">first</span> <span class="n">element</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">second</span> <span class="n">element</span><span class="o">*</span><span class="p">,</span> <span class="o">*</span><span class="n">third</span> <span class="n">element</span><span class="o">*</span><span class="p">]</span></code></pre></figure>

<p><em>second element</em>는 어딘가에 할당되기는 하지만 그 변수가 사용되지는 않는다.</p>

<p>파이썬3에서는 언패킹을 하는 새로운 방법이 추가되었다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rest</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">middle</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">middle</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span>
<span class="mi">4</span></code></pre></figure>

<h3 id="동일한-원소-n개-리스트-만들기">동일한 원소 N개 리스트 만들기</h3>

<p>리스트에 <code class="highlighter-rouge">*</code> 연산자를 사용하면 된다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="mi">4</span></code></pre></figure>

<h3 id="리스트로-문자열-만들기">리스트로 문자열 만들기</h3>

<p>굳이 반복문을 사용할 필요 없다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">'h'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">,</span> <span class="s">','</span><span class="p">,</span> <span class="s">' '</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="s">'o'</span> <span class="p">,</span><span class="s">'r'</span> <span class="p">,</span><span class="s">'l'</span> <span class="p">,</span><span class="s">'d'</span><span class="p">,</span> <span class="s">'!'</span><span class="p">]</span>
<span class="n">string</span> <span class="o">=</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">string</span>
<span class="s">"hello, world!"</span></code></pre></figure>

<h3 id="컬렉션-안에서-아이템-찾기">컬렉션 안에서 아이템 찾기</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="s">'f'</span><span class="p">,</span> <span class="s">'i'</span><span class="p">,</span> <span class="s">'n'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'m'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">]</span>

<span class="n">is_there</span> <span class="o">=</span> <span class="s">'i'</span> <span class="ow">in</span> <span class="nb">list</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">is_there</span>
<span class="bp">True</span></code></pre></figure>

<p><em>element</em> in <em>collection</em>으로 검색하는 것은 모두 같지만 다음과 같은 경우에는<br />
해시테이블을 이용하는 셋(set)이나 딕셔너리(dictionary)가  리스트보다 검색 속도가 훨씬 빠르다.</p>

<ul>
  <li>컬렉션의 크기가 클 때</li>
  <li>컬렉션을 반복적으로 검색할 때</li>
  <li>컬렉션 안에 중복이 없을 때</li>
</ul>

<h2 id="파이썬-디자인-기본-원칙">파이썬 디자인 기본 원칙</h2>

<p>PEP20으로도 알려진 파이썬 디자인의 기본 원칙이다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">this</span>
<span class="c1">#=&gt; try it</span></code></pre></figure>

:ET