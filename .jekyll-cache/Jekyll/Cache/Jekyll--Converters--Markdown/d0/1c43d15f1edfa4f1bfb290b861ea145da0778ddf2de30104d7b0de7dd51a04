I"X5<p><img src="/assets/images/new-script.gif" alt="new-script" /></p>

<h2 id="들어가며">들어가며</h2>

<p>마크다운과 <a href="https://jekyllrb-ko.github.io">Jekyll</a>을 접한 지 그리 오래 되지 않았다. 가볍고 수동이며 완전히 customize할 수 있다는 점이 참 좋다.</p>

<p>그런데 새 포스트 쓸 때마다 아래와 같은 헤더를 넣어줘야 하는 건 조금 불편하다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: "[shell] 포스트 헤더 자동으로 만들기"
excerpt: "쉘 스크립트 자동화"
date: 2019-12-24 15:21:32 +0900
categories:
   - dev
tags:
   - shell
   - script
   - automation
   - post
---
</code></pre></div></div>

<p>이 블로그(<a href="https://github.com/mmistakes/minimal-mistakes">minimal-mistakes</a> 테마)에서 포스트 하나를 표시하기 위해서는 <code class="highlighter-rouge">title</code>, <code class="highlighter-rouge">excerpt</code>, <code class="highlighter-rouge">date</code>, <code class="highlighter-rouge">categories</code>, <code class="highlighter-rouge">tags</code>를 써 주어야 한다. 그런데 저걸 언제 다 써! 결국 이전 포스트에서 헤더만 복사해서 재활용하게 된다.</p>

<p>복사와 붙여넣기는 원래 컴퓨터 전문이다. 사람이 할 일이 아닌 것이다. 그러므로 컴퓨터에게 시켜보자.</p>

<h2 id="쉘-스크립트">쉘 스크립트</h2>

<blockquote>
  <p>왜 쉘 스크립트인가? 간단한 문제이기도 하고, 쉘 스크립트가 파일 입출력에 아주 능하기 때문이다.</p>
</blockquote>

<p><a href="https://ko.wikipedia.org/wiki/유닉스_철학">유닉스 철학</a> 중에 이런 것이 있다.</p>

<blockquote>
  <p>각 프로그램이 하나의 일을 잘 할 수 있게 만들 것. 새로운 일을 하려면, 새로운 기능들을 추가하기 위해 오래된 프로그램을 복잡하게 만들지 말고 새로 만들 것.</p>
</blockquote>

<blockquote>
  <p>모든 프로그램 출력이 아직 잘 알려지지 않은 프로그램이라고 할지라도 다른 프로그램에 대한 입력이 될 수 있게 할 것. 무관한 정보로 출력을 채우지 말 것. 까다롭게 세로로 구분되거나 바이너리로 된 입력 형식은 피할 것. 대화식 입력을 고집하지 말 것.</p>
</blockquote>

<p>오늘날의 거의 모든 쉘과 유틸리티는 저 철학을 잘 지켜서 만들어졌다. 덕분에 명령어 몇 개의 조합 만으로 많은 일을 처리할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "Hello world." | sed "s/o/O/g"
HellO wOrld.
</code></pre></div></div>
<p><em>“Hello world.” 스트링에서 소문자 ‘o’를 대문자 ‘O’로 바꾸는 예제</em></p>

<h2 id="헤더-자동으로-만들기">헤더 자동으로 만들기</h2>

<p>헤더에서 바뀌는 부분은 (key:value) 쌍 중에 value 부분이다. 따라서 대부분은 변하기 않는다. 이를 템플릿 파일로 만들어 놓는다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: "__title__"
excerpt: "__excerpt__"
date: __date_time__ +0900
categories:
__categories__
tags:
__tags__
---
</code></pre></div></div>
<p><em>template.md</em></p>

<p>그리고 이 파일을 읽어서 특정 키워드를 사용자의 입력으로 대치한 다음에 새 파일에 쓰면 된다.</p>

<h3 id="쉘-선택">쉘 선택</h3>

<p>쉘은 <code class="highlighter-rouge">Zsh</code>을 사용한다. 왜냐 하면 <code class="highlighter-rouge">Bash</code>는 여러 줄 스트링을 지원하지 않기 때문이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash-3.2$ echo "Hello\nworld"
Hello\nworld
</code></pre></div></div>
<p><em>Bash</em></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zsh$ echo "Hello\nworld"
Hello
world
</code></pre></div></div>
<p><em>Zsh</em></p>

<h3 id="스크립트-작성">스크립트 작성</h3>

<p>스크립트의 흐름은 이렇게 된다:</p>
<ul>
  <li>파일명으로 사용할 스트링 입력 &amp; 파일 중복 검사</li>
  <li>타이틀 스트링 입력</li>
  <li>발췌(excerpt) 스트링 입력</li>
  <li>카테고리 스트링 입력</li>
  <li>태그 스크링 입력</li>
  <li>현재 날짜 기반으로 헤더 작성, 미리보기 출력</li>
  <li>새 파일에 작성</li>
</ul>

<p>아래는 완성본이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/zsh</span>

<span class="c"># Useful when creating new post.</span>
<span class="c"># Usage: ./new</span>

<span class="nb">date</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y-%m-%d<span class="si">)</span>
<span class="nb">time</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%H:%M:%S<span class="si">)</span>
<span class="nv">date_time</span><span class="o">=</span><span class="s2">"</span><span class="nv">$date</span><span class="s2"> </span><span class="nv">$time</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="s2">"New post from </span><span class="nv">$date_time</span><span class="s2">.</span><span class="se">\n</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"Permalink name: "</span>
<span class="nb">read </span>permalink

<span class="nv">permalink</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$permalink</span> | <span class="nb">sed</span> <span class="s2">"s/[ ]/-/g"</span><span class="si">)</span>
<span class="nv">outfile</span><span class="o">=</span><span class="s2">"_posts/</span><span class="nv">$date</span><span class="s2">-</span><span class="nv">$permalink</span><span class="s2">.md"</span>

<span class="c"># Check if any post with the same title exists.</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="nv">$outfile</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$outfile</span><span class="s2"> already exists."</span>
    <span class="nb">exit </span>0
<span class="k">fi

</span><span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"Title: "</span>
<span class="nb">read </span>title

<span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"Excerpt: "</span>
<span class="nb">read </span>excerpt

<span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"Categories (space separated): "</span>
<span class="nb">read </span>categories

<span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"Tags (space separated): "</span>
<span class="nb">read </span>tags

<span class="c"># Replace every space-padded string to "- (captured);".</span>
<span class="c"># And then cut last character ';'.</span>
<span class="c"># We use ';' to represent newline character.</span>
<span class="c"># This suck happens because the newline character is a bit tricky to handle.</span>
<span class="nv">categories</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$categories</span> | <span class="nb">sed</span> <span class="s2">"s/[ ]*</span><span class="se">\(</span><span class="s2">[^ ]*</span><span class="se">\)</span><span class="s2">[ ]*/   - </span><span class="se">\1</span><span class="s2">;/g"</span> | <span class="nb">sed</span> <span class="s2">"s/.</span><span class="nv">$/</span><span class="s2">/"</span><span class="si">)</span>
<span class="nv">tags</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$tags</span> | <span class="nb">sed</span> <span class="s2">"s/[ ]*</span><span class="se">\(</span><span class="s2">[^ ]*</span><span class="se">\)</span><span class="s2">[ ]*/   - </span><span class="se">\1</span><span class="s2">;/g"</span> | <span class="nb">sed</span> <span class="s2">"s/.</span><span class="nv">$/</span><span class="s2">/"</span><span class="si">)</span>

<span class="nv">infile</span><span class="o">=</span><span class="s2">"_draft/template.md"</span>

<span class="nv">content</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$infile</span> |
<span class="nb">sed</span> <span class="s2">"s/__title__/</span><span class="nv">$title</span><span class="s2">/"</span> |
<span class="nb">sed</span> <span class="s2">"s/__excerpt__/</span><span class="nv">$excerpt</span><span class="s2">/"</span> |
<span class="nb">sed</span> <span class="s2">"s/__date_time__/</span><span class="nv">$date_time</span><span class="s2">/"</span> |
<span class="nb">sed</span> <span class="s2">"s/__categories__/</span><span class="nv">$categories</span><span class="s2">/"</span> |
<span class="nb">sed</span> <span class="s2">"s/__tags__/</span><span class="nv">$tags</span><span class="s2">/"</span> |
<span class="nb">tr</span> <span class="s1">';'</span> <span class="s1">'\n'</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">Preview:"</span>
<span class="nb">echo</span> <span class="nv">$content</span>

<span class="nb">echo</span> <span class="s2">"Press enter to continue."</span>
<span class="nb">read

echo</span> <span class="nv">$content</span> <span class="o">&gt;</span> <span class="nv">$outfile</span>
<span class="nb">echo</span> <span class="s2">"New post created at </span><span class="nv">$outfile</span><span class="s2">."</span>
</code></pre></div></div>

<h3 id="삽질">삽질</h3>

<p>아주 간단해 보이지만 위 완성본이 나오기까지 무수한 삽질을 겪었다 (내공 부족).</p>

<p>카테고리와 태그를 입력받을 때에 공백 문자로 구분하여 여러 개의 입력을 받고 싶었다. 그래서 “some tags hmm..” 이런 식으로 쓰면 아래처럼 정리되는 식이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tags:
    - some
    - tags
    - hmm..
</code></pre></div></div>

<p>처음에는 스트링의 모든 공백을 <code class="highlighter-rouge">\n</code>문자로 대치한 다음 스트링 덩어리 왼쪽에 `   - <code class="highlighter-rouge">를, 오른쪽에 </code>\n`을 붙일 생각이었다. 그런데 스트링 덩어리를 특정하려면 정규 표현식을 써야 한다.</p>

<p>어차피 정규 표현식을 사용할 것이면 공백 문자를 줄바꿈 문자로 대치할 필요 없이 바로 <code class="highlighter-rouge">공백으로 구분되는 스트링</code>을 그룹화하여 대치할 수 있다.</p>

<p>공백으로 구분되는 스트링은 다음과 같이 잡아낸다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ ]*\([^ ]*\)[ ]*
</code></pre></div></div>
<p><em>왼쪽에 공백 0개 이상, 본 스트링에 공백 0개, 오른쪽에 공백 0개 이상을 만족하는 스트링을 찾아내는 정규표현식</em></p>

<p>이를 이용해 <code class="highlighter-rouge">sed</code>로 대치하면 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">tags</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$tags</span> | <span class="nb">sed</span> <span class="s2">"s/[ ]*</span><span class="se">\(</span><span class="s2">[^ ]*</span><span class="se">\)</span><span class="s2">[ ]*/   - </span><span class="se">\1</span><span class="s2">;/g"</span> | <span class="nb">sed</span> <span class="s2">"s/.</span><span class="nv">$/</span><span class="s2">/"</span><span class="si">)</span>
</code></pre></div></div>

<p>줄바꿈 대신 <code class="highlighter-rouge">;</code>을 사용했는데, <code class="highlighter-rouge">sed</code>가 <code class="highlighter-rouge">\n</code>를 무시하기 때문이다 (원래 single line editor이다). 파일에 쓰기 직전에 <code class="highlighter-rouge">tr</code>을 사용해 모든 <code class="highlighter-rouge">;</code> 문자를 <code class="highlighter-rouge">\n</code> 문자로 대치한다.</p>

<p><code class="highlighter-rouge">sed "s/.$//"</code>는 마지막 <code class="highlighter-rouge">;</code>를 떼어내기 위해 사용했다.</p>

<h2 id="마치며">마치며</h2>

<p>쉘 스크립트는 잘 몰라서 쓸 때마다 찾아보게 된다. 쉘마다 문법도 다르고 동작도 달라서 많이 헷갈린다.</p>

<p>이 스크립트는 <code class="highlighter-rouge">Zsh</code>에서는 잘 돌아가지만 <code class="highlighter-rouge">Bash</code>에서는 이상하게 동작한다. 언젠가 호환성을 생각해서 다시 짜야 할 것 같다.</p>

<p>아무튼 덕분에 글 쓰기 편해졌다. 역시 도구를 잘 써야 해.</p>

<blockquote>
  <p>프로그래밍 작업을 가볍게 하기 위해, 심지어 우회하는 방법으로 도구를 만들고 바로 버릴지라도 어설픈 도움 보다는 도구 사용을 선호할 것. <br />
“유닉스 철학 - Kenneth Lane Thompson”</p>
</blockquote>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://jekyllrb-ko.github.io">Jekyll</a></li>
  <li><a href="https://ko.wikipedia.org/wiki/유닉스_철학">유닉스 철학</a></li>
</ul>
:ET